#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://muzpbudurlatuznkrgtx.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im11enBidWR1cmxhdHV6bmtyZ3R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDEwOTAyNiwiZXhwIjoyMDc1Njg1MDI2fQ.MmErF4J-SBrK4ActQ3zkDNPQbpSLiD4J_R6rtj_h4Jg';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixTemplates() {
  console.log('ðŸ”§ Fixing report templates with basic schema...');

  try {
    // Insert templates with only the columns that exist in the current schema
    const newTemplates = [
      {
        name: 'Standard Inspection Report',
        format: 'html',
        mapping_json: {
          "title": "Technical Regulations Inspection Report",
          "sections": [
            "inspection_details",
            "operator_information", 
            "checklist_results",
            "findings",
            "notices_issued",
            "recommendations"
          ],
          "footer": "This report was generated by TRIAPP"
        },
        version: '1.0.0',
        is_default: true
      },
      {
        name: 'Executive Summary Report',
        format: 'html',
        mapping_json: {
          "title": "Inspection Executive Summary",
          "sections": [
            "overview",
            "key_findings",
            "risk_assessment",
            "actions_required"
          ],
          "footer": "Executive summary generated by TRIAPP"
        },
        version: '1.0.0',
        is_default: false
      }
    ];

    // Insert new templates
    const { data: insertedTemplates, error: insertError } = await supabase
      .from('report_templates')
      .insert(newTemplates)
      .select();

    if (insertError) {
      console.error('Error inserting new templates:', insertError);
    } else {
      console.log(`âœ… Inserted ${insertedTemplates?.length || 0} new templates`);
      insertedTemplates?.forEach(template => {
        console.log(`- ${template.name} (ID: ${template.id})`);
        console.log(`  Default: ${template.is_default}, Format: ${template.format}`);
      });
    }

    // Verify the templates
    const { data: finalTemplates, error: finalError } = await supabase
      .from('report_templates')
      .select('*')
      .order('name');

    if (finalError) {
      console.error('Error fetching final templates:', finalError);
    } else {
      console.log(`\nðŸŽ‰ Final verification: Found ${finalTemplates?.length || 0} templates`);
      finalTemplates?.forEach(template => {
        console.log(`- ${template.name}`);
        console.log(`  ID: ${template.id}`);
        console.log(`  Default: ${template.is_default}, Format: ${template.format}`);
        console.log(`  Version: ${template.version}`);
        console.log(`  Created: ${template.created_at}`);
      });
    }

  } catch (error) {
    console.error('Error:', error);
  }
}

fixTemplates();
