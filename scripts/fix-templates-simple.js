#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://muzpbudurlatuznkrgtx.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im11enBidWR1cmxhdHV6bmtyZ3R4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc2MDEwOTAyNiwiZXhwIjoyMDc1Njg1MDI2fQ.MmErF4J-SBrK4ActQ3zkDNPQbpSLiD4J_R6rtj_h4Jg';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixTemplates() {
  console.log('ðŸ”§ Fixing report templates...');

  try {
    // First, let's see what's in the table
    const { data: existingTemplates, error: fetchError } = await supabase
      .from('report_templates')
      .select('*');

    if (fetchError) {
      console.error('Error fetching templates:', fetchError);
      return;
    }

    console.log(`Found ${existingTemplates?.length || 0} existing templates`);

    // Let's check the table structure
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name')
      .eq('table_name', 'report_templates');

    if (columnsError) {
      console.error('Error fetching columns:', columnsError);
    } else {
      console.log('Available columns:', columns?.map(c => c.column_name));
    }

    // Try to insert new templates with all required fields
    const newTemplates = [
      {
        name: 'Standard Inspection Report',
        description: 'A comprehensive template for detailed inspection reports',
        format: 'html',
        template_content: `<!DOCTYPE html>
<html>
<head>
    <title>{{title}}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; }
        .section { margin: 20px 0; }
        .footer { margin-top: 40px; text-align: center; font-style: italic; }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{title}}</h1>
        <p>Inspection ID: {{inspection_id}}</p>
        <p>Date: {{inspection_date}}</p>
    </div>
    
    <div class="section">
        <h2>Operator Information</h2>
        <p><strong>Name:</strong> {{operator_name}}</p>
        <p><strong>Address:</strong> {{operator_address}}</p>
        <p><strong>VAT Number:</strong> {{vat_number}}</p>
    </div>
    
    <div class="section">
        <h2>Inspection Details</h2>
        <p><strong>Inspector:</strong> {{inspector_name}}</p>
        <p><strong>Status:</strong> {{inspection_status}}</p>
        <p><strong>Findings:</strong></p>
        <ul>
            {{#each findings}}
            <li>{{this}}</li>
            {{/each}}
        </ul>
    </div>
    
    <div class="footer">
        <p>{{footer}}</p>
    </div>
</body>
</html>`,
        mapping_json: {
          "title": "Technical Regulations Inspection Report",
          "sections": [
            "inspection_details",
            "operator_information", 
            "checklist_results",
            "findings",
            "notices_issued",
            "recommendations"
          ],
          "footer": "This report was generated by TRIAPP"
        },
        version: '1.0.0',
        is_default: true
      },
      {
        name: 'Executive Summary Report',
        description: 'A concise template for executive-level inspection summaries',
        format: 'html',
        template_content: `<!DOCTYPE html>
<html>
<head>
    <title>{{title}}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; }
        .section { margin: 20px 0; }
        .footer { margin-top: 40px; text-align: center; font-style: italic; }
        .risk-high { color: #d32f2f; font-weight: bold; }
        .risk-medium { color: #f57c00; font-weight: bold; }
        .risk-low { color: #388e3c; font-weight: bold; }
    </style>
</head>
<body>
    <div class="header">
        <h1>{{title}}</h1>
        <p>Executive Summary</p>
    </div>
    
    <div class="section">
        <h2>Overview</h2>
        <p>{{overview}}</p>
    </div>
    
    <div class="section">
        <h2>Key Findings</h2>
        <ul>
            {{#each key_findings}}
            <li>{{this}}</li>
            {{/each}}
        </ul>
    </div>
    
    <div class="section">
        <h2>Risk Assessment</h2>
        <p><span class="risk-{{risk_level}}">Risk Level: {{risk_level}}</span></p>
        <p>{{risk_description}}</p>
    </div>
    
    <div class="section">
        <h2>Actions Required</h2>
        <ul>
            {{#each actions_required}}
            <li>{{this}}</li>
            {{/each}}
        </ul>
    </div>
    
    <div class="footer">
        <p>{{footer}}</p>
    </div>
</body>
</html>`,
        mapping_json: {
          "title": "Inspection Executive Summary",
          "sections": [
            "overview",
            "key_findings",
            "risk_assessment",
            "actions_required"
          ],
          "footer": "Executive summary generated by TRIAPP"
        },
        version: '1.0.0',
        is_default: false
      }
    ];

    // Clear existing templates and insert new ones
    const { error: deleteError } = await supabase
      .from('report_templates')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all

    if (deleteError) {
      console.error('Error deleting existing templates:', deleteError);
    } else {
      console.log('âœ… Cleared existing templates');
    }

    // Insert new templates
    const { data: insertedTemplates, error: insertError } = await supabase
      .from('report_templates')
      .insert(newTemplates)
      .select();

    if (insertError) {
      console.error('Error inserting new templates:', insertError);
    } else {
      console.log(`âœ… Inserted ${insertedTemplates?.length || 0} new templates`);
      insertedTemplates?.forEach(template => {
        console.log(`- ${template.name}`);
      });
    }

    // Verify the templates
    const { data: finalTemplates, error: finalError } = await supabase
      .from('report_templates')
      .select('*');

    if (finalError) {
      console.error('Error fetching final templates:', finalError);
    } else {
      console.log(`\nðŸŽ‰ Final verification: Found ${finalTemplates?.length || 0} templates`);
      finalTemplates?.forEach(template => {
        console.log(`- ${template.name}: ${template.description || 'No description'}`);
        console.log(`  Content length: ${template.template_content?.length || 0} chars`);
        console.log(`  Default: ${template.is_default}, Format: ${template.format}`);
      });
    }

  } catch (error) {
    console.error('Error:', error);
  }
}

fixTemplates();
